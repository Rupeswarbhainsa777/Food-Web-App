package com.tap.controller;

import com.tap.*;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.sql.Timestamp;

import com.tap.Dao.OrderDao;
import com.tap.DaoImple.OrdersImp;
import com.tap.modeal.Cart;
import com.tap.modeal.CartItem;
import com.tap.modeal.OrderItem;
import com.tap.modeal.User;
import com.tap.modeal.Orders;

@WebServlet("/ChecketOutServlet")
public class ChecketOutServlet extends HttpServlet {

	private OrderDao orderDao;

	@Override
	public void init() throws ServletException {
		orderDao = new OrdersImp();

	}

	@Override
	protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		HttpSession session = req.getSession();

		Cart cart = (Cart) session.getAttribute("cart");
		User user = (User) session.getAttribute("loggedInUser");

		if (cart != null && user != null && !cart.getItems().isEmpty()) {

			String paymentMethod = req.getParameter("paymentMethod");
			String address = req.getParameter("address");

			Orders order = new Orders();

			order.setUserId(user.getUserId());
			order.setRestaurantId((int) session.getAttribute("restuarantId"));
//	        	   order.setOrderDate(new Timestamp(new Date().getTime()));

			order.setStatus("Pending");

			double totalAmount = 0;

			for (CartItem item : cart.getItems().values()) {

				totalAmount += item.getPrice() * item.getQuantity();

			}
			order.setTotalAmount(totalAmount);
         
			orderDao.addOrder(order);
			for (CartItem item : cart.getItems().values()) {

	         int restId = item.getRestaurantId();
	         
			int itemId	=item.getItemId();
			
 		    String name=	item.getName();
			double price = item.getPrice();
	
			int quantity = item.getQuantity();
			double totalPrice = price*quantity;
			
			
			OrderItem orderItem = new OrderItem(restId,  itemId, quantity, totalPrice);
			
			
			}
			session.removeAttribute("cart");

			session.setAttribute("order", order);

			resp.sendRedirect("orderConfirm.jsp");

		} else {
			resp.sendRedirect("cart.jsp");
		}

	}

}
