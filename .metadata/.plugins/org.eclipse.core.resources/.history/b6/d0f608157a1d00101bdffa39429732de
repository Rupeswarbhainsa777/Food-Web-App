package com.tap.DaoImple;

import com.tap.Dao.OrderDao;
import com.tap.modeal.Orders;


import java.sql.*;
import java.util.ArrayList;

public class OrdersImp implements OrderDao {

    private static final String ADD_ORDER = "insert into `order` (`orderId`, `restaurentId`, `userId`, `totalAmount`, `modeOfPayment`, `status`) "
    		+ "VALUES (?, ?, ?, ?, ?, ?)";
    
    private static final String DELETE = "DELETE FROM `order` WHERE `orderId` = ?";
    private static final String SELECT_ONE = "SELECT * FROM `order` WHERE `orderId` = ?";
    private static final String UPDATE = "UPDATE `order` SET `restaurentId` = ?, `userId` = ?, `totalAmount` = ?, `modeOfPayment` = ?, `status` = ? WHERE `orderId` = ?";
    private static final String SELECTALL_QUERY = "SELECT * FROM `order`";

    private Connection connection;

    private final String url = "jdbc:mysql://localhost/foodapp";
    private final String username = "root";
    private final String password = "@sumit222";

    public OrdersImp() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(url, username, password);
            System.out.println("Driver loaded & connection established.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void addOrder(Orders order) {
        int orderId = generateUniqueOrderId();

        try (PreparedStatement ps = connection.prepareStatement(ADD_ORDER)) {
            ps.setInt(1, orderId);
            ps.setInt(2, order.getRestaurantId());
            ps.setInt(3, order.getUserId());
            ps.setDouble(4, order.getTotalAmount());
            ps.setString(5, order.getModeOfPayment());
            ps.setString(6, order.getStatus());

            ps.executeUpdate();
            System.out.println("Order added successfully with orderId: " + orderId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public Orders getOrder(int orderId) {
        Orders order = null;

        try (PreparedStatement stmt = connection.prepareStatement(SELECT_ONE)) {
            stmt.setInt(1, orderId);
            ResultSet res = stmt.executeQuery();

            if (res.next()) {
                int restaurantId = res.getInt("restaurentId");
                int userId = res.getInt("userId");
                double totalAmount = res.getDouble("totalAmount");
                String modeOfPayment = res.getString("modeOfPayment");
                String status = res.getString("status");

                order = new Orders(orderId, restaurantId, userId, totalAmount, modeOfPayment, status);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return order;
    }

    @Override
    public void updateOrder(Orders order) {
        try (PreparedStatement stmt = connection.prepareStatement(UPDATE)) {
        	
        	stmt.setInt(1, order.getOrderId());
            stmt.setInt(2, order.getRestaurantId());
            stmt.setInt(3, order.getUserId());
            stmt.setDouble(4, order.getTotalAmount());
            stmt.setString(5, order.getModeOfPayment());
            stmt.setString(6, order.getStatus());
            

            stmt.executeUpdate();
            System.out.println("Order updated: " + order.getOrderId());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void deleteOrder(int orderId) {
        try (PreparedStatement stmt = connection.prepareStatement(DELETE)) {
            stmt.setInt(1, orderId);
            stmt.executeUpdate();
            System.out.println("Order deleted with orderId: " + orderId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public ArrayList<Orders> getAll() {
        ArrayList<Orders> list = new ArrayList<>();

        try (Statement stmt = connection.createStatement();
             ResultSet res = stmt.executeQuery(SELECTALL_QUERY)) {

            while (res.next()) {
                int orderId = res.getInt("orderId");
                int restaurantId = res.getInt("restaurentId");
                int userId = res.getInt("userId");
                double totalAmount = res.getDouble("totalAmount");
                String modeOfPayment = res.getString("modeOfPayment");
                String status = res.getString("status");

                Orders order = new Orders(orderId, restaurantId, userId, totalAmount, modeOfPayment, status);
                list.add(order);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return list;
    }

    private int generateUniqueOrderId() {
        int lastOrderId = 1;

        try {
            lastOrderId = getLastOrderIdFromDatabase();
        } catch (Exception e) {
            e.printStackTrace();
        }

        int newOrderId = lastOrderId + 1;

        try {
            updateLastOrderIdInDatabase(newOrderId);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return newOrderId;
    }

    private int getLastOrderIdFromDatabase() throws Exception {
        int lastOrderId = 0;
        String query = "SELECT MAX(orderId) FROM `order`";


        try (PreparedStatement stmt = connection.prepareStatement(query);
             ResultSet resultSet = stmt.executeQuery()) {

            if (resultSet.next()) {
                lastOrderId = resultSet.getInt(1);
            }
        }

        return lastOrderId;
    }

    private void updateLastOrderIdInDatabase(int newOrderId) throws SQLException
    {
        String query = "UPDATE last_order_id_table SET last_order_id = ?";

        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, newOrderId);
            stmt.executeUpdate();
        }
    }
}
