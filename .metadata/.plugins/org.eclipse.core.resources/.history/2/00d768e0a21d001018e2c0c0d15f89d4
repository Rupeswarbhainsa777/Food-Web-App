package com.tap.DaoImple;


import com.tap.Dao.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import com.tap.modeal.History;

public class HistoryDaoImp implements HistoryDao
{   
	private Connection con = null;
	private PreparedStatement pstmt = null;
	private final String url = "jdbc:mysql://localhost/foodapp";
	private final String username = "root";
	private final String password = "@sumit222";
	private static final   String insert = "INSERT INTO order_history (order_history_id, user_id, order_id) VALUES (?, ?, ?)";
	private static final   String  select = "SELECT * FROM order_history WHERE order_history_id = ?";
	private static final   String update = "UPDATE order_history SET user_id = ?, order_id = ? WHERE order_history_id = ?";
	private static final   String delete2 = "DELETE FROM order_history WHERE order_history_id = ?";
    
    private Connection connection;

    public HistoryDaoImp()
    {
    	Class.forName("com.mysql.cj.jdbc.Driver");
		con = DriverManager.getConnection(url, username, password);
    }

    @Override
    public void addOrderHistory(History orderHistory) {
      
        try (
        PreparedStatement stmt = connection.prepareStatement(sql))
        {
            stmt.setInt(1, orderHistory.getOrderHistoryId());
            stmt.setInt(2, orderHistory.getUserId());
            stmt.setInt(3, orderHistory.getOrderId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public History getOrderHistory(int orderHistoryId) {
       
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, orderHistoryId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                return new History(
                    rs.getInt("order_history_id"),
                    rs.getInt("user_id"),
                    rs.getInt("order_id")
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public void updateOrderHistory(History orderHistory) {
        
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, orderHistory.getUserId());
            stmt.setInt(2, orderHistory.getOrderId());
            stmt.setInt(3, orderHistory.getOrderHistoryId());
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void deleteOrderHistory(int orderHistoryId) {
       
        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, orderHistoryId);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<History> getAll() {
        List<History> list = new ArrayList<>();
        String sql = "SELECT * FROM order_history";
        try (Statement stmt = connection.createStatement()) {
            ResultSet rs = stmt.executeQuery(sql);
            while (rs.next()) {
                History history = new History(
                    rs.getInt("order_history_id"),
                    rs.getInt("user_id"),
                    rs.getInt("order_id")
                );
                list.add(history);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }
}
